=pod

=head1 NAME

OSSL_CMP_cmp_timeframe,
OSSL_CMP_validate_msg,
OSSL_CMP_validate_cert_path,
OSSL_CMP_print_cert_verify_cb
- functions for verifying CMP message protection

=head1 SYNOPSIS

 #include <openssl/cmp.h>
 int OSSL_CMP_check_time(const ASN1_TIME *start,
                         const ASN1_TIME *end,  const X509_VERIFY_PARAM *vpm);
 int OSSL_CMP_validate_msg(OSSL_CMP_CTX *ctx, OSSL_CMP_MSG *msg);
 int OSSL_CMP_validate_cert_path(OSSL_CMP_CTX *ctx,
                                 const X509_STORE *trusted_store,
                                 const STACK_OF(X509) *extra_untrusted,
                                 const X509 *cert, int defer_errors);
 int OSSL_CMP_print_cert_verify_cb(int ok, X509_STORE_CTX *ctx);

=head1 DESCRIPTION

This is the API for validating the protection of CMP messages,
which includes validating CMP server certificates and their paths
while optionally checking the revocation status of the certificates(s).

OSSL_CMP_cmp_timeframe() compares the given time period with the current time.
If verification parameters are given and X509_V_FLAG_USE_CHECK_TIME is set
the reference time included there is used instead of the current time.

OSSL_CMP_validate_msg() validates the protection of the given PKIMessage
using either password-based mac (PBM) or a signature algorithm.

In case of signature algorithm, the certificate to use for protection
validation is taken from ctx->srvCert if set. Otherwise potentially suitable
sender certificates are determined by matching the PKIMessage's sender DN and
senderKID to the certificates available in the PKIMessage's extraCerts,
ctx->untrusted_certs, and ctx->trusted_store.  The first candidate that can be
validated against ctx->trusted_store, utilizing ctx->untrusted_certs and
extraCerts, is used.

If none of the candidate certs can be validated this way and B<msg> is a CMP
I<IP> message and exceptional handling according to 3GPP TS 33.310 is enabled
via B<OSSL_CMP_CTX_PERMIT_TA_IN_EXTRACERTS_FOR_IR> and the issued certificate
can be validated taking the self-signed certificates from the extraCerts field
as trust anchor then a second try is made for the same list of candidate certs
taking the self-signed extraCerts as trust anchor.

In case of successful validation of PBM protection of a certificate response,
the certificates in the caPubs field (if any) are added to ctx->trusted_store,
to be available for validating future messages in the same context.
Those could e.g. apply to later Polling Responses (pollRep) or PKI Confirmation
(PKIConf) messages in the same transaction.

OSSL_CMP_validate_cert_path() attempts to validate the given certificate and its
path using the given store of trusted certs (possibly including CRLs and a cert
verification callback) and non-trusted intermediate certs from the B<ctx>
and from any given list B<extra_untrusted>.
The B<defer_errors> parameter needs to be set when used in a certConf callback
because any following certConf exchange will likely clear the OpenSSL error
queue.

OSSL_CMP_print_cert_verify_cb() is a diagnostic function that may be registered
using X509_STORE_set_verify_cb(), such that it gets called by OpenSSL's
verify_cert() function at the end of a cert verification as an opportunity
to gather and output information regarding a (failing) cert verification,
and to possibly change the result of the verification (not done here).
It returns 0 if and only if the cert verification is considered failed.

=head1 NOTES

CMP is defined in RFC 4210 (and CRMF in RFC 4211).

=head1 RETURN VALUES

OSSL_CMP_cmp_timeframe() returns 0 if X509_V_FLAG_NO_CHECK_TIME is set in the
given verification parameters or the reference time is within the given bounds,
1 if it is past the end time, and -1 if it is before the start time.

OSSL_CMP_validate_msg() returns 1 on success, 0 on error or validation failed.

OSSL_CMP_validate_cert_path() returns 1 on successful validation and 0
otherwise.

=head1 SEE ALSO

L<OSSL_CMP_CTX_create(3)>, L<OSSL_CMP_exec_IR_ses(3)>

=head1 COPYRIGHT

Copyright 2007-2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
