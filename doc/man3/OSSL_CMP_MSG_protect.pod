=pod

=head1 NAME

OSSL_CMP_add_error_txt,
OSSL_CMP_HDR_generalInfo_item_push0,
OSSL_CMP_MSG_generalInfo_items_push1,
OSSL_CMP_HDR_push0_freeText,
OSSL_CMP_HDR_push1_freeText,
OSSL_CMP_MSG_get0_header,
OSSL_CMP_HDR_get0_transactionID,
OSSL_CMP_HDR_get0_senderNonce,
OSSL_CMP_HDR_get0_recipNonce,
OSSL_CMP_HDR_init,
OSSL_CMP_HDR_set1_recipient,
OSSL_CMP_HDR_set1_sender,
OSSL_CMP_HDR_set1_senderKID,
OSSL_CMP_HDR_set_messageTime,
OSSL_CMP_HDR_set_pvno,
OSSL_CMP_HDR_get_pvno,
OSSL_CMP_MSG_check_implicitConfirm,
OSSL_CMP_MSG_genm_item_push0,
OSSL_CMP_MSG_genm_items_push1,
OSSL_CMP_MSG_get_bodytype,
OSSL_CMP_MSG_set_bodytype,
OSSL_CMP_MSG_set_implicitConfirm,
OSSL_CMP_MSG_protect,
OSSL_CMP_MSG_add_extraCerts,
OSSL_CMP_build_cert_chain,
OSSL_CMP_MSG_check_received,
OSSL_CMP_ASN1_OCTET_STRING_set1,
OSSL_CMP_ASN1_OCTET_STRING_set1_bytes,
OSSL_CMP_sk_X509_add1_cert,
OSSL_CMP_sk_X509_add1_certs,
OSSL_CMP_X509_STORE_add1_certs,
OSSL_CMP_X509_STORE_get1_certs
- functions manipulating CMP messages

=head1 SYNOPSIS

  #include <openssl/cmp.h>

  void OSSL_CMP_add_error_txt(const char *separator, const char *txt);
  int OSSL_CMP_HDR_generalInfo_item_push0(OSSL_CMP_HDR *hdr,
                                          const OSSL_CMP_ITAV *itav);
  int OSSL_CMP_MSG_generalInfo_items_push1(OSSL_CMP_MSG *msg,
                                           STACK_OF(OSSL_CMP_ITAV) *itavs);
  int OSSL_CMP_HDR_push0_freeText( OSSL_CMP_HDR *hdr, ASN1_UTF8STRING *text);
  int OSSL_CMP_HDR_push1_freeText( OSSL_CMP_HDR *hdr, ASN1_UTF8STRING *text);
  OSSL_CMP_HDR *OSSL_CMP_MSG_get0_header(const OSSL_CMP_MSG *msg);
  ASN1_OCTET_STRING *OSSL_CMP_HDR_get0_transactionID(const OSSL_CMP_HDR *hdr);
  ASN1_OCTET_STRING *OSSL_CMP_HDR_get0_senderNonce(const OSSL_CMP_HDR *hdr);
  ASN1_OCTET_STRING *OSSL_CMP_HDR_get0_recipNonce(const OSSL_CMP_HDR *hdr);
  int OSSL_CMP_HDR_init(OSSL_CMP_CTX *ctx, OSSL_CMP_HDR *hdr);
  int OSSL_CMP_HDR_set1_recipient(OSSL_CMP_HDR *hdr, const X509_NAME *nm);
  int OSSL_CMP_HDR_set1_sender(OSSL_CMP_HDR *hdr, const X509_NAME *nm);
  int OSSL_CMP_HDR_set1_senderKID(OSSL_CMP_HDR *hdr,
                                  const ASN1_OCTET_STRING *senderKID);
  int OSSL_CMP_HDR_set_messageTime(OSSL_CMP_HDR *hdr);
  int OSSL_CMP_HDR_set_pvno(OSSL_CMP_HDR *hdr, int pvno);
  int OSSL_CMP_HDR_get_pvno(const OSSL_CMP_HDR *hdr);
  int OSSL_CMP_MSG_check_implicitConfirm(OSSL_CMP_MSG *msg);
  int OSSL_CMP_MSG_genm_item_push0(OSSL_CMP_MSG *msg,
                                   const OSSL_CMP_ITAV *itav);
  int OSSL_CMP_MSG_genm_items_push1(OSSL_CMP_MSG *msg,
                                    STACK_OF(OSSL_CMP_ITAV) *itavs);
  int OSSL_CMP_MSG_get_bodytype(const OSSL_CMP_MSG *msg);
  int OSSL_CMP_MSG_set_bodytype( OSSL_CMP_MSG *msg, int type);
  int OSSL_CMP_MSG_set_implicitConfirm(OSSL_CMP_MSG *msg);
  int OSSL_CMP_MSG_protect(OSSL_CMP_CTX *ctx, OSSL_CMP_MSG *msg);
  int OSSL_CMP_MSG_add_extraCerts(OSSL_CMP_CTX *ctx, OSSL_CMP_MSG *msg);
  STACK_OF(X509) *OSSL_CMP_build_cert_chain(X509_STORE *store,
                                            const X509 *cert);
  typedef int (*allow_unprotected_cb_t) (const OSSL_CMP_CTX *ctx,
                                         const OSSL_CMP_MSG *msg,
                                         int invalid_protection, int arg);
  int OSSL_CMP_MSG_check_received(OSSL_CMP_CTX *ctx, const OSSL_CMP_MSG *msg,
                                  allow_unprotected_cb_t cb, int cb_arg);
  int OSSL_CMP_ASN1_OCTET_STRING_set1(ASN1_OCTET_STRING **tgt,
                                 const ASN1_OCTET_STRING *src);
  int OSSL_CMP_ASN1_OCTET_STRING_set1_bytes(ASN1_OCTET_STRING **tgt,
                                       const unsigned char *bytes, size_t len);
  int OSSL_CMP_sk_X509_add1_cert(STACK_OF(X509) *sk, X509 *cert,
                                 int not_duplicate);
  int OSSL_CMP_sk_X509_add1_certs(STACK_OF(X509) *sk, STACK_OF(X509) *certs,
                             int no_self_signed, int no_duplicates);
  int OSSL_CMP_X509_STORE_add1_certs(X509_STORE *store, STACK_OF(X509) *certs,
                                int only_self_signed);
  STACK_OF(X509) *OSSL_CMP_X509_STORE_get1_certs(const X509_STORE *store);

=head1 DESCRIPTION

OSSL_CMP_add_error_txt()
appends text to the extra data field of the last error message in the queue,
after adding the optional separator unless data has been empty so far.
Note that, in contrast, ERR_add_error_data() simply
overwrites the previous contents of the data field.

OSSL_CMP_add_error_data() is a macro calling
OSSL_CMP_add_error_txt() with the separator being ":".

OSSL_CMP_add_error_line() is a macro calling
OSSL_CMP_add_error_txt() with the separator being "\n".

OSSL_CMP_HDR_generalInfo_item_push0() adds the given InfoTypeAndValue
item to the hdr->generalInfo stack. Consumes the B<itav> pointer.

OSSL_CMP_MSG_generalInfo_items_push1() adds a copy of the B<itavs> stack to
the generalInfo field of PKIheader of the B<msg>. Does not consume the B<itavs>
pointer.

OSSL_CMP_HDR_push0_freeText() pushes an ASN1_UTF8STRING to
hdr->freeText and consumes the given pointer.

OSSL_CMP_HDR_push1_freeText() pushes an ASN1_UTF8STRING to
hdr->freeText and does not consume the pointer.

OSSL_CMP_MSG_get0_header returns the header of the given CMP message.

OSSL_CMP_HDR_get0_transactionID returns the transaction ID of the given
PKIHeader.

OSSL_CMP_HDR_get0_senderNonce returns the sender nonce of the given PKIHeader.

OSSL_CMP_HDR_get0_recipNonce returns the recipient nonce of the given PKIHeader.

OSSL_CMP_HDR_init() initializes a PKIHeader structure based on the
values in the given OSSL_CMP_CTX structure.

OSSL_CMP_HDR_set1_recipient() sets the recipient field in the given
PKIHeader to the given X509 Name value, without consuming the pointer.

OSSL_CMP_HDR_set1_sender() sets the sender field in the given PKIHeader
to the given X509 Name value, without consuming the pointer.

OSSL_CMP_HDR_set1_senderKID() Sets hdr->senderKID to the given
string. In IR this is the reference number issued by the CA. In KUR
this is set to the public key ID from the previously enrolled certificate.

OSSL_CMP_HDR_set_messageTime() sets the messageTime to the current system time.

OSSL_CMP_HDR_set_pvno() sets hdr->pvno to the given B<pvno>.

OSSL_CMP_HDR_get_pvno() returns the pvno of the given B<hdr> or -1 on error.

OSSL_CMP_MSG_check_implicitConfirm() returns 1 if implicitConfirm is
set in the given PKIMessage, 0 if not.

OSSL_CMP_MSG_genm_item_push0() pushes the B<itav> to the body of the
of the PKIMessage B<msg> of GenMsg type. Consumes the B<itavs> pointer.

OSSL_CMP_MSG_genm_items_push1() adds a copy of the B<itavs> stack to the body
of the PKIMessage B<msg> of GenMsg type. Does not consume the B<itavs> pointer.

OSSL_CMP_MSG_get_bodytype() returns the body type of the given
PKIMessage.

ASN1_OCTET_STRING *OSSL_CMP_MSG_get_transactionID(const OSSL_CMP_MSG *msg)

OSSL_CMP_MSG_set_bodytype() sets the type of the message contained in
the PKIMessage body field.

OSSL_CMP_MSG_set_implicitConfirm() sets implicitConfirm in the
generalInfo field of the header.

OSSL_CMP_MSG_protect() protects the given message deciding on the algorithm
depending on the available context information:  If there is a secretValue it
selects PBMAC. If not and there is a clCert it selects Signature.  Generates and
sets the protection to the given message.

OSSL_CMP_MSG_add_extraCerts() fills the extraCerts field in the message.

OSSL_CMP_build_cert_chain() builds up the certificate chain of cert as high up
as possible using the given X509_STORE containing all possible intermediate
certificates and optionally the (possible) trust anchor(s).

OSSL_CMP_MSG_check_received() checks for the given message received (i.e.,
response by server or request from client) whether it has a valid body type,
its protection is accepted,
its transaction ID matches the one of the previous message (if any), and
its recipNonce matches the senderNonce of the previous message (if any).
The message protection is accepted if it is present and can be validated,
but also if it is absent or invalid and the callback function B<cb> is not NULL
and yields non-zero result using B<ctx>, B<msg>, a flag whether the message
protection is present but invalid, and the supplied argument B<cb_arg>.
If so, learns from the message received the senderNonce and the transaction ID
if not yet present in the ctx.  It returns the body type (which is >= 0) of the
message on success, -1 on error.

OSSL_CMP_ASN1_OCTET_STRING_set1() frees any previous value of the variable
referenced via the first argument and assigns either a copy of
the src ASN1_OCTET_STRING given as the second argument or NULL.
It returns 1 on success, 0 on error.

OSSL_CMP_ASN1_OCTET_STRING_set1_bytes() frees any previous value of the variable
referenced via the first argument and assigns either a copy of the given byte
string (with the given length) or NULL. It returns 1 on success, 0 on error.

OSSL_CMP_sk_X509_add1_cert() adds a certificate to given stack, optionally only
if not already contained.

OSSL_CMP_sk_X509_add1_certs() adds certificates to given stack, optionally only
if not self-signed and optionally only if not already contained.

OSSL_CMP_X509_STORE_add1_certs() adds all or only self-signed certificates from
the given stack to given store.

OSSL_CMP_X509_STORE_get1_certs() retrieves a copy of all certificates in the
given store.


=head1 NOTES

CMP is defined in RFC 4210 (and CRMF in RFC 4211).

The implementation of CMP for OpenSSL is still work in progress. The API
might change every release!

=head1 RETURN VALUES

See the individual functions above.

=head1 SEE ALSO

L<OSSL_CMP_CTX_create(3)>, L<OSSL_CMP_exec_IRses(3)>,
L<OSSL_CMP_certreq_new(3)>, L<OSSL_CMP_MSG_http_perform(3)>

=head1 COPYRIGHT

Copyright 2007-2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
